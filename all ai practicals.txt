Pract 1:
%Program1
%red(rose).
%likes(bill ,cindy).
%owns(gold,john).

%Program 2:
c_to_f(C, F) :-
    F is C * 9 / 5 + 32.

% Check if the temperature is freezing
freezing(F) :-
    F =< 32.


Pract 2: 8 queen prob

% Pract2:render solutions nicely.
:- use_rendering(chess).

%%    queens(+N, -Queens) is nondet.
%
%	@param	Queens is a list of column numbers for placing the queens.
%	@author Richard A. O'Keefe (The Craft of Prolog)

queens(N, Queens) :-
    length(Queens, N),
	board(Queens, Board, 0, N, _, _),
	queens(Board, 0, Queens).

board([], [], N, N, _, _).
board([_|Queens], [Col-Vars|Board], Col0, N, [_|VR], VC) :-
	Col is Col0+1,
	functor(Vars, f, N),
	constraints(N, Vars, VR, VC),
	board(Queens, Board, Col, N, VR, [_|VC]).

constraints(0, _, _, _) :- !.
constraints(N, Row, [R|Rs], [C|Cs]) :-
	arg(N, Row, R-C),
	M is N-1,
	constraints(M, Row, Rs, Cs).

queens([], _, []).
queens([C|Cs], Row0, [Col|Solution]) :-
	Row is Row0+1,
	select(Col-Vars, [C|Cs], Board),
	arg(Row, Vars, Row-Row),
	queens(Board, Row, Solution).


/** <examples>

?- queens(8, Queens).

*/


Pract3: DFS
% 3:Updated graph representation with adjacency information
edge(a, b).
edge(a, c).
edge(b, d).
edge(b, e).
edge(c, f).

% Depth-first search predicate
dfs(Node, Visited) :-
    dfs(Node, [], Visited).

dfs(Node, Path, Visited) :-
    \+ member(Node, Path),
    write(Node), nl,
    append(Path, [Node], NewPath),
    findall(Adjacent, edge(Node, Adjacent), AdjacentNodes),
    member(NextNode, AdjacentNodes),
    dfs(NextNode, NewPath, Visited).

dfs(_, Visited, Visited).


% Example usage:
% To find all nodes reachable from node 'a'
% Call: dfs(a, Visited).



Pract4: BFS

% 4:Graph representation with heuristic values
edge(a, b, 2).
edge(a, c, 3).
edge(b, d, 1).
edge(b, e, 4).
edge(c, f, 2).

% Heuristic values for each node
heuristic(a, 5).
heuristic(b, 3).
heuristic(c, 2).
heuristic(d, 1).
heuristic(e, 4).
heuristic(f, 0).

% Best-First Search predicate
best_first_search(Start, Goal) :-
    best_first_search([(0, Start)], Goal, []).

best_first_search([], _, _) :- write('Goal not reached.').
best_first_search([(Cost, Node) | _], Goal, _) :-
    Node = Goal,
    write('Goal reached!'), nl,
    write('Total cost: '), write(Cost).
best_first_search([(Cost, Node) | Rest], Goal, Visited) :-
    findall((NewCost, Adjacent), (edge(Node, Adjacent, EdgeCost), \+ member(Adjacent, Visited), heuristic(Adjacent, H), NewCost is Cost + EdgeCost + H), Children),
    append(Rest, Children, NewQueue),
    sort(NewQueue, SortedQueue),
    best_first_search(SortedQueue, Goal, [Node | Visited]).

% Example usage:
% To find the path from node 'a' to node 'f'
% Call: best_first_search(a, f).











Pract5: 
( https://studyglance.in/labprograms/aidisplay.php?url1=ai/week5.pl&url2=&url3=&url4=&title=Write%20a%20program%20in%20prolog%20to%20solve%208%20Puzzle%20problems&opurl1=ai/outputs/w5.txt&opurl2=&opurl3=&opurl4=) 
% Simple Prolog Planner for the 8 Puzzle Problem

/* This predicate initialises the problem states. The first argument  of solve is the initial state, the 2nd the goal state, and the third the plan that will be produced.*/

test(Plan):-
    write('Initial state:'),nl,
    Init= [at(tile4,1), at(tile3,2), at(tile8,3), at(empty,4), at(tile2,5), at(tile6,6), at(tile5,7), at(tile1,8), at(tile7,9)],
    write_sol(Init),
    Goal= [at(tile1,1), at(tile2,2), at(tile3,3), at(tile4,4), at(empty,5), at(tile5,6), at(tile6,7), at(tile7,8), at(tile8,9)],
    nl,write('Goal state:'),nl,
    write(Goal),nl,nl,
    solve(Init,Goal,Plan).

solve(State, Goal, Plan):-
    solve(State, Goal, [], Plan).

% Determines whether Current and Destination tiles are a valid move.
is_movable(X1,Y1) :- (1 is X1 - Y1) ; (-1 is X1 - Y1) ; (3 is X1 - Y1) ; (-3 is X1 - Y1).


/* This predicate produces the plan. Once the Goal list is a subset of the current State the plan is complete and it is written to the screen using write_sol */

solve(State, Goal, Plan, Plan):-
    is_subset(Goal, State), nl,
    write_sol(Plan).

solve(State, Goal, Sofar, Plan):-
    act(Action, Preconditions, Delete, Add),
    is_subset(Preconditions, State),
    \+ member(Action, Sofar),
    delete_list(Delete, State, Remainder),
    append(Add, Remainder, NewState),
    solve(NewState, Goal, [Action|Sofar], Plan).

/* The problem has three operators.
 1st arg = name
 2nd arg = preconditions
 3rd arg = delete list
 4th arg = add list. */

% Tile can move to new position only if the destination tile is empty & Manhattan distance = 1
act(move(X,Y,Z),
    [at(X,Y), at(empty,Z), is_movable(Y,Z)],
    [at(X,Y), at(empty,Z)],
    [at(X,Z), at(empty,Y)]).


% Utility predicates.

% Check is first list is a subset of the second

is_subset([H|T], Set):-
    member(H, Set),
    is_subset(T, Set).
is_subset([], _).

% Remove all elements of 1st list from second to create third.

delete_list([H|T], Curstate, Newstate):-
    remove(H, Curstate, Remainder),
    delete_list(T, Remainder, Newstate).
delete_list([], Curstate, Curstate).

remove(X, [X|T], T).
remove(X, [H|T], [H|R]):-
    remove(X, T, R).

write_sol([]).
write_sol([H|T]):-
    write_sol(T),
    write(H), nl.

append([H|T], L1, [H|L2]):-
    append(T, L1, L2).
append([], L, L).

member(X, [X|_]).
member(X, [_|T]):-
    member(X, T).




query :- test(Plan).














Pract 6: robot movement
% Initial state of the robot and obstacles
at(robot, position(0, 0)).
at(obstacle1, position(1, 0)).
at(obstacle2, position(2, 1)).
choose_action(Action).
 in_robot(Obj).
% Goal state for the robot to reach
goal_state(at(robot, position(2, 2))).

% Define the connected locations and possible directions
connected(position(X, Y), position(X, Y1)) :- Y1 is Y + 1.
connected(position(X, Y), position(X, Y1)) :- Y1 is Y - 1.
connected(position(X, Y), position(X1, Y)) :- X1 is X + 1.
connected(position(X, Y), position(X1, Y)) :- X1 is X - 1.

% Means-End Analysis to achieve the goal
solve :-
    goal_state(at(robot, Goal)),
    write('Goal reached!'), nl,
    write('Robot is at: '), write(Goal), nl.

solve :-
    \+ goal_state(at(robot, _)),
    choose_action(Action),
    execute_action(Action),
    solve.

% Choosing an action based on the current state
choose_action(move_forward) :-
    at(robot, Current),
    connected(Current, Next),
    \+ at(obstacle(_, _), Next).

choose_action(turn_left).

choose_action(turn_right).

choose_action(pick) :-
    at(robot, Position),
    at(obstacle(Obj), Position).

choose_action(drop) :-
    at(robot, Position),
    in_robot(Obj).

% Executing the chosen action
execute_action(move_forward) :-
    at(robot, Current),
    connected(Current, Next),
    \+ at(obstacle(_, _), Next),
    write('Robot moves forward to '), write(Next), nl,
    retract(at(robot, _)),
    assert(at(robot, Next)).

execute_action(turn_left) :-
    write('Robot turns left'), nl.

execute_action(turn_right) :-
    write('Robot turns right'), nl.

execute_action(pick) :-
    at(robot, Position),
    at(obstacle(Obj), Position),
    write('Robot picks up '), write(Obj), nl,
    retract(at(obstacle(Obj), Position)),
    assert(in_robot(Obj)).

execute_action(drop) :-
    at(robot, Position),
    in_robot(Obj),
    write('Robot drops '), write(Obj), write(' at '), write(Position), nl,
    retract(in_robot(Obj)),
    assert(at(obstacle(Obj), Position)).

% Example usage:
% Call: solve.

Pract 7: travelling salesman

% 7:Cities and distances between them
distance(city1, city2, 10).
distance(city2, city3, 25).
distance(city2, city3, 20).

% Predicate to find a tour
tsp(Tour, TotalDistance) :-
    permutation([city1, city2, city3], Tour),
    valid_tour(Tour, TotalDistance),
    write('Optimal Tour: '), write(Tour), nl,
    write('Total Distance: '), write(TotalDistance), nl.

% Predicate to check if a tour is valid and calculate total distance
valid_tour([_], 0).
valid_tour([City1, City2 | Rest], TotalDistance) :-
    distance(City1, City2, Dist),
    valid_tour([City2 | Rest], RemainingDistance),
    TotalDistance is Dist + RemainingDistance.

% Example usage
% Call: tsp(Tour, TotalDistance).



Pract 8: 
% Pract8 : Medical imaging data representation
% For simplicity, using a list of features representing imaging data
% Each feature is a pixel value or a feature extracted from the image

% Example features for illustration
features([feature('Intensity', 0.8), feature('Texture', 0.4), feature('Shape', 0.2), feature('Edge', 0.9)]).

% Predicates to define diseases based on imaging features
diagnosis(features) :-
    features(Features),
    evaluate_features(Features, Disease),
    write('Diagnosis: '), write(Disease), nl.

% Rule to evaluate imaging features and make a diagnosis
evaluate_features(Features, Disease) :-
    has_intensity_variation(Features),
    has_texture_irregularity(Features),
    has_abnormal_shape(Features),
    has_edge_irregularity(Features),
    Disease = 'Healthy'.

% Rules to check for specific features related to diseases
has_intensity_variation(Features) :-
    member(feature('Intensity', Intensity), Features),
    Intensity > 0.7. % Example threshold, can be adjusted.

has_texture_irregularity(Features) :-
    member(feature('Texture', Texture), Features),
    Texture < 0.5. % Example threshold, can be adjusted.

has_abnormal_shape(Features) :-
    member(feature('Shape', Shape), Features),
    Shape < 0.3. % Example threshold, can be adjusted.

has_edge_irregularity(Features) :-
    member(feature('Edge', Edge), Features),
    Edge > 0.8. % Example threshold, can be adjusted.

% Example usage:
% Call: diagnosis(features).
